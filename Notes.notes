When we want to render full page component we have to use the layout file.

php artisan livewire:layout => to create the layout file by default it will create the folder component and layout file named app.blade.php inside it. you can change it from config file.

php artisan make:livewire Examples.ShowUser --inline => will create the single php file not the blade file.
php artisan make:livewire Examples.ShowUser => will create two files one in resources folder and other is in app folder. 
above command is used for component creation.

inline components are having html code inside the php file.

php artisan livewire:stubs => used for creating custom components
This will create four new files in your application:

stubs/livewire.stub — used for generating new components
stubs/livewire.inline.stub — used for generating inline components
stubs/livewire.test.stub — used for generating test files
stubs/livewire.view.stub — used for generating component views

you can modify them. after modifing you can run normal component creation commands and modification will be reflected in your components.

for injecting the livewire component inside other component or in blade file you have mentioned the its proper location if it is not inside the component or livewire folder. i.e <livewire:examples.create-user />

We can pass data to view from php class of livewire with the with() function.

layout file is used to render full page component.

Attributes from php file can be passed such as title.
title can also be passed while chaning the view method from render function. i.e => return view('livewire.examples.counter')->title('Title');
for metadata => return view('livewire.examples.counter')->laoutData(['Title' => 'a', etc]);

we add the layout attribute or chain the layout with render function to force the component to use the specific layout.
#[Layout('components.layouts.app')]
=> return view('livewire.examples.counter')->layout('layouts.app);

Validation Rules can also be applied from attribute class in .php file.

wire:model.live => this will send request after every keyup in form fields.

[Form Object]

1.  command to create form object => php artisan live:form RegisterUser;
2.  This command will create php file inside app/livewire/forms folder.
3.  It is used: if we have lots of rule for validation etc.
4.  Usage of Form: Import the form class in the livewire component class.
5.  $this->form->validate(); for form validation.
6.  wire:model='form.password' => used if validating from the form class.

[Life Cycle Hooks]

1.  mount()
2.  updated[what ever the name of property to update]() => public $selectedCounty = null; => public function updatedselectedCounty();

[File Upload]
1. use WithFileUploads; => trait is used to upload the files to database;
2.  $this->file->store('files'); => will store the file in the folder => storage/app/files

[Navigation]
1.  livewire:navigate attribute is used in blade component to navigate to certain link.

[Lazy Loading]
1.  used when some queries required more time to execute. So to avoid the waiting we use lazyloading.

[Pagination]
1.  use WithPagination; trait is used for pagination.
2.  Change the pagination theme from livewire config file.
3.  <span>{{$users->links()}}</span> => used for showing pagination.
4.  cursorPaginate(5); is used for next and previous button only.

[Search Bar] => see Pagination

[Computed Property]
1.  Used when you have very heavy quries to execute. see the pagination.php file.

[Same component for create and edit]
1.  See the product page.

[Polling]
1.  Polling is used to run the code in backend ground. like checking the payment response or subscriber count.

[Events]
1.  Events can be dispatched via dispatched method and can be caught in any component. additional parameters can also be passed.
2. See the products folder.






















